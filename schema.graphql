type Account @entity {
    id: ID!
    publicKey: String! @index
    identity: Identity @derivedFrom(field: "account")
    sub: IdentitySub @derivedFrom(field: "account")
}

type IdentityAdditionalField {
    name: String
    value: String
}

enum Judgement {
    Unknown
    FeePaid
    Reasonable
    KnownGood
    OutOfDate
    LowQuality
    Erroneous
}

enum JudgementRequestStatus {
  Requested
  Provided
  Cancelled
}

type JudgementRequest @entity {
    id: ID!
    identity: Identity!
    registrarIndex: Int! @index
    status: JudgementRequestStatus!
    extrinsicIndex: String
    createdAtBlock: Int! @index
    createdAt: DateTime! @index
    updatedAtBlock: Int!
    updatedAt: DateTime!
}

type Identity @entity {
    id: ID!
    account: Account! @unique
    judgement: Judgement!
    judgementRequests: [JudgementRequest!] @derivedFrom(field: "identity")
    subs: [IdentitySub!] @derivedFrom(field: "super")
    additional: [IdentityAdditionalField!]
    display: String
    legal: String
    web: String
    riot: String
    email: String
    pgpFingerprint: String
    image: String
    twitter: String
    isKilled: Boolean!
    extrinsicIndex: String
    createdAtBlock: Int! @index
    createdAt: DateTime! @index
    updatedAtBlock: Int!
    updatedAt: DateTime!
}

type IdentitySub @entity {
    id: ID!
    super: Identity
    account: Account! @unique
    name: String
    extrinsicIndex: String
    createdAtBlock: Int! @index
    createdAt: DateTime! @index
    updatedAtBlock: Int!
    updatedAt: DateTime!
}