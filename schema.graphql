enum ProposalType {
  AllianceMotion
  Announcement
  UnscrupulousItem
  FellowshipReferendum
}

enum ProposalStatus {
  Noted
  Proposed
  Tabled
  Started
  Announced
  Passed
  NotPassed
  Cancelled
  Executed
  ExecutionFailed
  Used
  Invalid
  Missing
  Reaped
  Approved
  Disapproved
  Closed
  Awarded
  Added
  Rejected
  Retracted
  Slashed
  Active
  Removed
  Extended
  Claimed
  Unrequested
  Requested
  Submitted
  Killed
  Cleared
  Deciding
  ConfirmStarted
  ConfirmAborted
  Confirmed
  DecisionDepositPlaced
  TimedOut
  Opened
}

type MotionThreshold {
  value: Int!
}

enum ReferendumThresholdType {
  SuperMajorityApprove
  SuperMajorityAgainst
  SimpleMajority
}

type ReferendumThreshold {
  type: ReferendumThresholdType!
}

union Threshold = MotionThreshold | ReferendumThreshold

type Preimage @entity {
  id: ID!
  proposer: String
  hash: String! @index
  deposit: BigInt
  length: Int
  proposedCall: ProposedCall
  section: String
  method: String
  status: ProposalStatus!
  extrinsicIndex: String
  createdAtBlock: Int! @index
  createdAt: DateTime! @index
  updatedAtBlock: Int
  updatedAt: DateTime
}

type Proposal @entity {
  id: ID!
  type: ProposalType! @index
  hash: String @index
  index: Int @index
  proposer: String
  deposit: BigInt
  threshold: Threshold
  end: Int
  delay: Int
  curator: String
  payee: String
  reward: BigInt
  fee: BigInt
  bond: BigInt
  digest: String
  announcement: Announcements
  callData: ProposedCall
  description: String
  parentBountyIndex: Int
  proposalArguments: ProposedCall
  proposalArgumentHash: String
  voting: [Vote!] @derivedFrom(field: "proposal")
  preimage: Preimage
  status: ProposalStatus!
  statusHistory: [StatusHistory!] @derivedFrom(field: "proposal")
  trackNumber: Int
  origin: String
  metadata: String
  enactmentAtBlock: Int
  enactmentAfterBlock: Int
  submittedAtBlock: Int
  submissionDeposit: SubmissionDeposit
  decisionDeposit: DecisionDeposit
  deciding: Deciding
  tally: Tally
  executeAtBlockNumber: Int
  executedAt: DateTime
  extrinsicIndex: String
  createdAtBlock: Int! @index
  createdAt: DateTime! @index
  endedAtBlock: Int
  endedAt: DateTime
  updatedAtBlock: Int @index
  updatedAt: DateTime @index
}

type DecisionDeposit {
  who: String
  amount: BigInt
}

type SubmissionDeposit {
  who: String
  amount: BigInt
}

type Deciding {
  since: Int
  confirming: Int
}

enum AnnouncementType {
  Account
  Website
  Announcement
}

type Announcements @entity {
  id: ID!
  hash: String! @index
  index: Int @index
  proposer: String @index
  type: AnnouncementType @index
  version: String
  codec: BigInt
  announcement: JSON
  digest: String
  cid: String
  proposal: Proposal
  code: BigInt
  isRemoved: Boolean
  status: ProposalStatus!
  extrinsicIndex: String
  statusHistory: [StatusHistory!] @derivedFrom(field: "announcement")
  createdAt: DateTime! @index
  createdAtBlock: Int! @index
  updatedAt: DateTime @index
  updatedAtBlock: Int @index
}

enum ActivityType {
  RetentionRequest
  PromotionRequest
  DemotionRequest
  InductionRequest
  Promoted
  Retained
  Demoted
  GeneralProposal
  Inducted
  SalaryInduction
  Registration
  Payout
  Voted
  CycleStarted
  Imported
  OffBoarded
  ActivityChanged
  RFC
  EvidenceSubmitted
  EvidenceJudged
}

type Activity @entity {
  id: ID!
  type: ActivityType! @index
  who: String @index
  proposal: Proposal
  announcement: Announcements
  salaryCycle: SalaryCycle
  payout: Payout
  otherActions: MetaActions
  vote: Vote
  createdAt: DateTime!
  createdAtBlock: Int!
}

type MetaActions @entity {
  id: ID!
  who: String @index
  amount: BigInt
  isActive: Boolean
  evidence: String
  rank: Int
  toRank: Int
  showClaimButton: Boolean
  evidenceJudged: Boolean
  wish: String
  createdAt: DateTime @index
  createdAtBlock: Int
  extrinsicIndex: String
}

type SalaryCycle @entity {
  id: ID!
  cycleIndex: Int! @index
  cycleStart: Int! @index
  cycleStartDatetime: DateTime
  extrinsicIndex: String
  totalRegistrations: BigInt
  budget: BigInt
  totalUnregisteredPaid: BigInt
}

type Payout @entity {
  id: ID!
  cycleIndex: SalaryCycle
  who: String! @index
  beneficiary: String! @index
  amount: BigInt
  rank: Int
  createdAt: DateTime!
  createdAtBlock: Int!
  extrinsicIndex: String! 
}

type Tally {
  ayes: BigInt
  nays: BigInt
  support: BigInt
  bareAyes: BigInt
}

type StatusHistory @entity {
  id: ID!
  proposal: Proposal
  announcement: Announcements
  status: ProposalStatus!
  block: Int!
  preimage: Preimage
  extrinsicIndex: String
  timestamp: DateTime!
}

type ProposedCall {
  section: String!
  method: String!
  args: JSON
  description: String!
}

enum VoteDecision {
  yes
  no
  abstain
  split
  splitAbstain
}

type StandardVoteBalance {
  value: BigInt
}

type SplitVoteBalance {
  aye: BigInt
  nay: BigInt
  abstain: BigInt
}

union VoteBalance = StandardVoteBalance | SplitVoteBalance

enum VoteType {
  AllianceMotion
  Fellowship
  Referendum
}

type Vote @entity {
  id: ID!
  voter: String
  proposalId: ID!
  proposalIndex: Int! @index
  proposal: Proposal!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  decision: VoteDecision
  balance: VoteBalance
  extrinsicIndex: String
  lockPeriod: Int
  type: VoteType
}

type CurveData @entity {
  id: ID!
  block: Int! @index
  proposal: Proposal!
  index: Int! @index
  extrinsicIndex: String
  timestamp: DateTime! @index
  approvalPercent: Float @index
  supportPercent: Float @index
}